// Generated from src/grammars/Filter.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class FilterLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly T__14 = 15;
	public static readonly T__15 = 16;
	public static readonly T__16 = 17;
	public static readonly IDENTIFIER = 18;
	public static readonly VALUE = 19;
	public static readonly STRING = 20;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"IDENTIFIER", "VALUE", "STRING", "ESC",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'&'", "'||'", "'|'", "'='", "'^='", "'$='", "'*='", "'<=>'", 
		"','", "'>='", "'<='", "'>'", "'<'", "'!='", "'!('", "')'", "'('",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, "IDENTIFIER", "VALUE", "STRING",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(FilterLexer._LITERAL_NAMES, FilterLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return FilterLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(FilterLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Filter.g4"; }

	// @Override
	public get ruleNames(): string[] { return FilterLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return FilterLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return FilterLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return FilterLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x16\x7F\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x03\x02\x03" +
		"\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03" +
		"\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\t\x03\t\x03" +
		"\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\r\x03\r\x03" +
		"\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x11\x03" +
		"\x11\x03\x12\x03\x12\x03\x13\x03\x13\x07\x13\\\n\x13\f\x13\x0E\x13_\v" +
		"\x13\x03\x13\x03\x13\x07\x13c\n\x13\f\x13\x0E\x13f\v\x13\x03\x13\x05\x13" +
		"i\n\x13\x03\x14\x06\x14l\n\x14\r\x14\x0E\x14m\x03\x15\x03\x15\x03\x15" +
		"\x07\x15s\n\x15\f\x15\x0E\x15v\v\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03" +
		"\x16\x03\x16\x05\x16~\n\x16\x03t\x02\x02\x17\x03\x02\x03\x05\x02\x04\x07" +
		"\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15" +
		"\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02" +
		"\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x02\x03\x02\x07\x06\x02" +
		"&&C\\aac|\x06\x022;C\\aac|\b\x02&&002;C\\aac|\b\x02\"\"/02<C\\aac|\x04" +
		"\x02$$^^\x02\x84\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07" +
		"\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03" +
		"\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03" +
		"\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03" +
		"\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03" +
		"\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02" +
		"\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x03-\x03\x02\x02\x02\x05" +
		"/\x03\x02\x02\x02\x072\x03\x02\x02\x02\t4\x03\x02\x02\x02\v6\x03\x02\x02" +
		"\x02\r9\x03\x02\x02\x02\x0F<\x03\x02\x02\x02\x11?\x03\x02\x02\x02\x13" +
		"C\x03\x02\x02\x02\x15E\x03\x02\x02\x02\x17H\x03\x02\x02\x02\x19K\x03\x02" +
		"\x02\x02\x1BM\x03\x02\x02\x02\x1DO\x03\x02\x02\x02\x1FR\x03\x02\x02\x02" +
		"!U\x03\x02\x02\x02#W\x03\x02\x02\x02%h\x03\x02\x02\x02\'k\x03\x02\x02" +
		"\x02)o\x03\x02\x02\x02+}\x03\x02\x02\x02-.\x07(\x02\x02.\x04\x03\x02\x02" +
		"\x02/0\x07~\x02\x0201\x07~\x02\x021\x06\x03\x02\x02\x0223\x07~\x02\x02" +
		"3\b\x03\x02\x02\x0245\x07?\x02\x025\n\x03\x02\x02\x0267\x07`\x02\x027" +
		"8\x07?\x02\x028\f\x03\x02\x02\x029:\x07&\x02\x02:;\x07?\x02\x02;\x0E\x03" +
		"\x02\x02\x02<=\x07,\x02\x02=>\x07?\x02\x02>\x10\x03\x02\x02\x02?@\x07" +
		">\x02\x02@A\x07?\x02\x02AB\x07@\x02\x02B\x12\x03\x02\x02\x02CD\x07.\x02" +
		"\x02D\x14\x03\x02\x02\x02EF\x07@\x02\x02FG\x07?\x02\x02G\x16\x03\x02\x02" +
		"\x02HI\x07>\x02\x02IJ\x07?\x02\x02J\x18\x03\x02\x02\x02KL\x07@\x02\x02" +
		"L\x1A\x03\x02\x02\x02MN\x07>\x02\x02N\x1C\x03\x02\x02\x02OP\x07#\x02\x02" +
		"PQ\x07?\x02\x02Q\x1E\x03\x02\x02\x02RS\x07#\x02\x02ST\x07*\x02\x02T \x03" +
		"\x02\x02\x02UV\x07+\x02\x02V\"\x03\x02\x02\x02WX\x07*\x02\x02X$\x03\x02" +
		"\x02\x02Y]\t\x02\x02\x02Z\\\t\x03\x02\x02[Z\x03\x02\x02\x02\\_\x03\x02" +
		"\x02\x02][\x03\x02\x02\x02]^\x03\x02\x02\x02^i\x03\x02\x02\x02_]\x03\x02" +
		"\x02\x02`d\t\x02\x02\x02ac\t\x04\x02\x02ba\x03\x02\x02\x02cf\x03\x02\x02" +
		"\x02db\x03\x02\x02\x02de\x03\x02\x02\x02eg\x03\x02\x02\x02fd\x03\x02\x02" +
		"\x02gi\t\x03\x02\x02hY\x03\x02\x02\x02h`\x03\x02\x02\x02i&\x03\x02\x02" +
		"\x02jl\t\x05\x02\x02kj\x03\x02\x02\x02lm\x03\x02\x02\x02mk\x03\x02\x02" +
		"\x02mn\x03\x02\x02\x02n(\x03\x02\x02\x02ot\x07$\x02\x02ps\x05+\x16\x02" +
		"qs\n\x06\x02\x02rp\x03\x02\x02\x02rq\x03\x02\x02\x02sv\x03\x02\x02\x02" +
		"tu\x03\x02\x02\x02tr\x03\x02\x02\x02uw\x03\x02\x02\x02vt\x03\x02\x02\x02" +
		"wx\x07$\x02\x02x*\x03\x02\x02\x02yz\x07^\x02\x02z~\x07$\x02\x02{|\x07" +
		"^\x02\x02|~\x07^\x02\x02}y\x03\x02\x02\x02}{\x03\x02\x02\x02~,\x03\x02" +
		"\x02\x02\n\x02]dhmrt}\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!FilterLexer.__ATN) {
			FilterLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(FilterLexer._serializedATN));
		}

		return FilterLexer.__ATN;
	}

}

